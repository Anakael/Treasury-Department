// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TreasuryDepartment.Models;

namespace TreasuryDepartment.Migrations
{
    [DbContext(typeof(TreasuryDepartmentContext))]
    partial class TreasuryDepartmentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TreasuryDepartment.Models.Balance", b =>
                {
                    b.Property<long>("SourceUserId");

                    b.Property<long>("TargetUserId");

                    b.Property<decimal>("Sum");

                    b.HasKey("SourceUserId", "TargetUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("TreasuryDepartment.Models.BlackList", b =>
                {
                    b.Property<long>("SenderUserId");

                    b.Property<long>("TargetUserId");

                    b.HasKey("SenderUserId", "TargetUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("BlackLists");
                });

            modelBuilder.Entity("TreasuryDepartment.Models.Deal", b =>
                {
                    b.Property<long>("SenderUserId");

                    b.Property<long>("TargetUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("LastStatusChangeDate");

                    b.Property<int>("Status");

                    b.Property<decimal>("Sum");

                    b.HasKey("SenderUserId", "TargetUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("TreasuryDepartment.Models.Friend", b =>
                {
                    b.Property<long>("User1Id");

                    b.Property<long>("User2Id");

                    b.HasKey("User1Id", "User2Id");

                    b.HasIndex("User2Id");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("TreasuryDepartment.Models.Invite", b =>
                {
                    b.Property<long>("SenderUserId");

                    b.Property<long>("TargetUserId");

                    b.Property<int>("Status");

                    b.HasKey("SenderUserId", "TargetUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("TreasuryDepartment.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TreasuryDepartment.Models.Balance", b =>
                {
                    b.HasOne("TreasuryDepartment.Models.User", "SourceUser")
                        .WithMany("OutcomeBalances")
                        .HasForeignKey("SourceUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TreasuryDepartment.Models.User", "TargetUser")
                        .WithMany("IncomeBalances")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TreasuryDepartment.Models.BlackList", b =>
                {
                    b.HasOne("TreasuryDepartment.Models.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TreasuryDepartment.Models.User", "TargetUser")
                        .WithMany()
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TreasuryDepartment.Models.Deal", b =>
                {
                    b.HasOne("TreasuryDepartment.Models.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TreasuryDepartment.Models.User", "TargetUser")
                        .WithMany()
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TreasuryDepartment.Models.Friend", b =>
                {
                    b.HasOne("TreasuryDepartment.Models.User", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TreasuryDepartment.Models.User", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TreasuryDepartment.Models.Invite", b =>
                {
                    b.HasOne("TreasuryDepartment.Models.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TreasuryDepartment.Models.User", "TargetUser")
                        .WithMany()
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
